{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Form","props","onSubmit","getweather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","getWeather","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","this","components_Title","components_Form","components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1986a500.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Title=()=>(\r\n    <div className=\"Lpanel\">\r\n                <h1 className=\"title-container__title\">Weather Finder</h1>\r\n                <h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\r\n            </div>\r\n);\r\n\r\nexport default Title;","import React from \"react\";\r\n\r\nconst Form=(props)=>(\r\n    <form onSubmit={props.getweather} >\r\n                <input type=\"text\" name=\"city\" placeholder=\"city\"/>\r\n                <input type=\"text\" name=\"country\" placeholder=\"country\"/>\r\n              <button >Find</button>\r\n            </form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather=(props)=>(\r\n        <div className=\"weather__info\"> \r\n     {props.city&&props.country&&\r\n     <p className=\"weather__key\">\r\n     Location: <span className=\"weather__value\">{props.city} {props.country}</span></p>}\r\n    {props.temperature&&<p className=\"weather__key\"> Temperature: <span className=\"weather__value\">{props.temperature}</span></p>}\r\n     {props.humidity&&<p className=\"weather__key\"> Humidity: <span className=\"weather__value\">{props.humidity}</span></p>}\r\n     {props.description&&<p className=\"weather__key\">Desciption: <span className=\"weather__value\"> {props.description}</span></p>}\r\n     {props.error&&<p className=\"weather__error\">{props.error}</p>}\r\n        </div>\r\n    \r\n);\r\n\r\nexport default Weather;","import React, { Component } from 'react';\nimport './App.css';\nimport Title from \"./components/Title\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY=\"fe13b264abbebf865bcf9e5bae1436d1\";\n\n\nclass App extends Component {\n\n  state={\n    temperature:undefined,\n        city:undefined,\n        country:undefined,\n        humidity:undefined,\n        description:undefined,\n  }\n\n  getWeather=async (e)=> {\n    e.preventDefault();\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n\n    const api_call= await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=netric`);\n    const data=await api_call.json();\n    console.log(data);\n    if(city&&country){\n      this.setState({\n        temperature:data.main.temp,\n        city:data.name,\n        country:data.sys.country,\n        humidity:data.main.humidity,\n         description:data.weather[0].description,\n        error:''\n      });\n    }else{\n      this.setState({\n        temperature:undefined,\n        city:undefined,\n        country:undefined,\n        humidity:undefined,\n        description:undefined,\n        error:\"You have to input city and country\"\n      });\n    }\n    \n  }\n  render() {\n    return (\n      <div>\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n            <div className=\"col-5 title-container\">\n            <Title/>\n            </div>\n              <div className=\"col-7 form-container\">\n              <Form getweather={this.getWeather}/>\n              <Weather \n                temperature={this.state.temperature}\n                city={this.state.city}\n                country={this.state.country}\n                humidity={this.state.humidity}\n                description={this.state.description}\n                error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\r\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}